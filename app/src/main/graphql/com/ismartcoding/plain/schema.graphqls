type BluetoothInfo {
  mac: String!
}

type Config {
  id: ID!

  group: String!

  value: String!

  createdAt: Time!

  updatedAt: Time!
}

input ConfigInput {
  group: String!

  value: String!
}

type Device {
  id: ID!

  name: String

  dhcpName: String

  mac: String!

  mdnsName: String

  macVendor: String!

  ip4: String!

  ip6s: [String!]!

  isOnline: Boolean!

  createdAt: Time!

  activeAt: Time!

  updatedAt: Time!
}

type EndictItem {
  id: ID!

  word: String!

  definition: [String!]!

  translation: [String!]!

  pos: [String!]!

  exchange: [String!]!

  examples(n: Int!): [String!]!

  phonetic: String!
}

type Hostapd {
  isActive: Boolean!

  isEnabled: Boolean!

  config: String!
}

type KeyFloatPair {
  k: String!

  v: Float!
}

type Mutation {
  createConfig(input: ConfigInput!): Config!

  updateConfig(id: ID!, input: ConfigInput!): Config!

  deleteConfig(id: ID!): Boolean!

  deleteConfigs(group: String!): Boolean!

  updateSystemConfig(key: String!, value: String!): Boolean!

  deleteDevice(id: ID!): Boolean!

  updateDeviceName(id: ID!, name: String!): Device!

  applyNetplan(config: String!): NetworkConfig!

  applyNetmix(config: String!): NetworkConfig!

  applyHostapd(config: String!, enable: Boolean!): Hostapd!

  enableHostapd(enable: Boolean!): Hostapd!

  applyWireGuard(id: ID!, config: String!, enable: Boolean!): WireGuard!

  enableWireGuard(id: ID!, enable: Boolean!): WireGuard!

  deleteWireGuard(id: ID!): Boolean!
}

type Network {
  ifName: String!

  name: String!

  type: String!
}

type NetworkConfig {
  netplan: String!

  netmix: String!
}

type NetworkInfo {
  gateway4: String!
}

type NetworkInterface {
  ip4: String!

  ip6: String!

  name: String!

  mac: String!

  flags: String!
}

type Query {
  devices: [Device!]!

  configs: [Config!]!

  networkConfig: NetworkConfig!

  network: NetworkInfo!

  networks: [Network!]!

  interfaces: [NetworkInterface!]!

  bluetooth: BluetoothInfo!

  hostapd: Hostapd!

  wireGuards: [WireGuard!]!

  searchEndict(q: String!, offset: Int!, limit: Int!): [EndictItem!]!

  searchEndictByWords(words: [String!]!): [EndictItem!]!

}

scalar Time

type WireGuard {
  isActive: Boolean!

  isEnabled: Boolean!

  id: ID!

  config: String!

  listeningPort: Int

  peers: [WireGuardPeer!]!
}

type WireGuardPeer {
  publicKey: String!

  latestHandshake: Time

  rxBytes: Int!

  endpoint: String!

  txBytes: Int!
}

schema {
  query: Query
  mutation: Mutation
}
